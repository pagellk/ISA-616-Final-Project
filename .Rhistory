# Display the aggregated average credit hours per semester
knitr::kable(data.frame(Average_Credit_Hours_Per_Semester = avg_credit_hours_per_semester_aggregated),
col.names = c("Average Credit Hours per Semester"),
caption = "Aggregated Average Credit Hours per Semester for Graduated Students") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify students who graduated in 9 semesters
students_10_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 10) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_10_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_10_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_10_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_10_semesters <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_10_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_10_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Step 1: Identify students who graduated in 6 semesters
students_10_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 10) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_10_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_10_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_10_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_10_semesters <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Step 7: Filter out students who graduated in term 202510
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::filter(Term.Code != 202510)
# Step 8: Calculate the credit hours per semester
credit_hours_per_semester <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% graduated_students_10_semesters$Student.ID) |>
dplyr::arrange(Student.ID, Term.Code) |>
dplyr::group_by(Student.ID) |>
dplyr::mutate(Credit_Hours_Semester = Cum.Credit.Hrs - dplyr::lag(Cum.Credit.Hrs, default = 0)) |>
dplyr::ungroup()
# Step 9: Calculate the aggregated average credit hours per semester
total_credit_hours <- sum(credit_hours_per_semester$Credit_Hours_Semester, na.rm = TRUE)
total_semesters <- nrow(credit_hours_per_semester)
avg_credit_hours_per_semester_aggregated <- total_credit_hours / total_semesters
# Display the aggregated average credit hours per semester
knitr::kable(data.frame(Average_Credit_Hours_Per_Semester = avg_credit_hours_per_semester_aggregated),
col.names = c("Average Credit Hours per Semester"),
caption = "Aggregated Average Credit Hours per Semester for Graduated Students") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(DataExplorer, # For explorer and cleaning data by visualizing missing values.
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl, #to read Excel files
networkD3 # to create a Sankey Plot
) # For creating dummy variables of categorical variables automatically.)
library(dplyr)
if(require(knitr) == FALSE) install.packages("knitr")
if(require(kableExtra) == FALSE) install.packages("kableExtra")
# Step 1: Identify the most recent semester for each student
most_recent_semester <- BA %>%
group_by(Student.ID) %>%
filter(Term.Code == max(Term.Code)) %>%
ungroup()
# Step 2: Identify the most recent major (the last non-NA major in each row)
recent_major <- most_recent_semester %>%
mutate(recent_major = coalesce(Major.1, Major.2, Major.3)) %>%
select(Student.ID, recent_major)
# Step 3: Identify the student's prior majors by checking all three major columns for previous semesters
previous_majors <- BA %>%
filter(!(Term.Code %in% most_recent_semester$Term.Code)) %>%
mutate(previous_major = coalesce(Major.1, Major.2, Major.3)) %>%
group_by(Student.ID) %>%
summarise(previous_major = last(previous_major)) %>%
ungroup()
# Step 4: Identify students who switched from Business Analytics to another major
switched_students <- previous_majors %>%
left_join(recent_major, by = "Student.ID") %>%
filter(previous_major == "BA Major" & recent_major != "BA Major")
# Step 5: Count the number of students who switched majors
switched_major_display <- switched_students %>%
group_by(recent_major) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(desc(student_count))
# Display the result
print(switched_major_display)
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(DataExplorer, # For explorer and cleaning data by visualizing missing values.
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl, #to read Excel files
networkD3 # to create a Sankey Plot
) # For creating dummy variables of categorical variables automatically.)
library(dplyr)
if(require(knitr) == FALSE) install.packages("knitr")
if(require(kableExtra) == FALSE) install.packages("kableExtra")
# Step 1: Identify the most recent semester for each student
most_recent_semester <- BA %>%
group_by(Student.ID) %>%
filter(Term.Code == max(Term.Code)) %>%
ungroup()
# Step 2: Identify the most recent major (the last non-NA major in each row)
recent_major <- most_recent_semester %>%
mutate(recent_major = coalesce(Major.1, Major.2, Major.3)) %>%
select(Student.ID, recent_major)
# Step 3: Identify the student's prior majors by checking all three major columns for previous semesters
previous_majors <- BA %>%
filter(!(Term.Code %in% most_recent_semester$Term.Code)) %>%
mutate(previous_major = coalesce(Major.1, Major.2, Major.3)) %>%
group_by(Student.ID) %>%
summarise(previous_major = last(previous_major)) %>%
ungroup()
# Step 4: Identify students who switched from Business Analytics to another major
switched_students <- previous_majors %>%
left_join(recent_major, by = "Student.ID") %>%
filter(previous_major == "BA Major" & recent_major != "BA Major")
# Step 5: Count the number of students who switched majors
switched_major_display <- switched_students %>%
group_by(recent_major) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(desc(student_count))
# Display the switched major table in a pretty format
knitr::kable(switched_major_display,
col.names = c("Recent Major", "Student Count"),
caption = "Number of Students Who Switched Majors") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify the first semester the student switched majors
switched_students_with_semesters <- switched_students %>%
# For each student, find the first semester where their major was not "BA Major"
left_join(BA %>%
filter(Student.ID %in% switched_students$Student.ID) %>%
filter(Term.Code < max(Term.Code)) %>%  # Exclude the most recent semester
group_by(Student.ID) %>%
mutate(first_switch_semester = min(Term.Code[!is.na(coalesce(Major.1, Major.2, Major.3)) &
!coalesce(Major.1, Major.2, Major.3) == "BA Major"])) %>%
ungroup(),
by = "Student.ID") %>%
# Calculate the number of semesters between the first switch semester and the most recent semester
mutate(semesters_before_switch = max(Term.Code) - first_switch_semester)
# Step 2: Count how many students switched after x semesters
distribution_of_switches <- switched_students_with_semesters %>%
group_by(semesters_before_switch) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(semesters_before_switch)
# Step 3: Display the result in a nice format with kable and kableExtra
knitr::kable(distribution_of_switches,
col.names = c("Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify the first semester when the student switched majors
switched_students_with_semesters <- switched_students %>%
left_join(BA %>%
filter(Student.ID %in% switched_students$Student.ID) %>%
group_by(Student.ID) %>%
# Find the first semester where the student switched majors (i.e., where major is no longer "BA Major")
mutate(first_switch_semester = min(Term.Code[!is.na(coalesce(Major.1, Major.2, Major.3)) &
coalesce(Major.1, Major.2, Major.3) != "BA Major"])) %>%
ungroup(), by = "Student.ID") %>%
# Ensure we have only the rows for students who actually switched majors
filter(!is.na(first_switch_semester)) %>%
mutate(semesters_before_switch = first_switch_semester - min(Term.Code))  # Calculate semesters before switch
# Step 2: Count the distribution of students based on how many semesters they spent before switching
distribution_of_switches <- switched_students_with_semesters %>%
group_by(semesters_before_switch) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(semesters_before_switch)
# Step 3: Display the distribution of students in a nice format using kable and kableExtra
knitr::kable(distribution_of_switches,
col.names = c("Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify the first semester when the student switched majors
switched_students_with_semesters <- switched_students %>%
left_join(BA %>%
filter(Student.ID %in% switched_students$Student.ID) %>%
# Only keep terms prior to the student's most recent semester (last semester)
filter(Term.Code < max(Term.Code)) %>%
group_by(Student.ID) %>%
# Determine the first semester where the student switched majors (not "BA Major")
mutate(first_switch_semester = min(Term.Code[!is.na(coalesce(Major.1, Major.2, Major.3)) &
!coalesce(Major.1, Major.2, Major.3) == "BA Major"])) %>%
ungroup(), by = "Student.ID") %>%
# Only keep rows where the student actually switched majors
filter(!is.na(first_switch_semester)) %>%
# Calculate the number of semesters before they switched majors
mutate(semesters_before_switch = first_switch_semester - min(Term.Code))
# Step 2: Count the number of students who switched majors after x semesters
distribution_of_switches <- switched_students_with_semesters %>%
group_by(semesters_before_switch) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(semesters_before_switch)
# Step 3: Display the distribution of students in a nice format with kable and kableExtra
knitr::kable(distribution_of_switches,
col.names = c("Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify when the student switched majors and calculate distinct semesters before the switch
switched_students_with_semesters <- switched_students %>%
left_join(BA %>%
filter(Student.ID %in% switched_students$Student.ID) %>%
# Only keep terms before the student's most recent semester
filter(Term.Code < max(Term.Code)) %>%
group_by(Student.ID) %>%
# Find the first semester where the student switched majors (when Major is not "BA Major")
mutate(first_switch_semester = min(Term.Code[!is.na(coalesce(Major.1, Major.2, Major.3)) &
!coalesce(Major.1, Major.2, Major.3) == "BA Major"])) %>%
ungroup(), by = "Student.ID") %>%
# Only keep rows where the student actually switched majors
filter(!is.na(first_switch_semester)) %>%
# Calculate the distinct count of semesters before the switch
mutate(semesters_before_switch = length(unique(Term.Code[Term.Code < first_switch_semester])))
# Step 2: Count how many students switched majors after x semesters
distribution_of_switches <- switched_students_with_semesters %>%
group_by(semesters_before_switch) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(semesters_before_switch)
# Step 3: Display the distribution of students in a nice format with kable and kableExtra
knitr::kable(distribution_of_switches,
col.names = c("Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify the first semester the student switched majors
switched_students_with_semesters <- switched_students %>%
left_join(BA %>%
filter(Student.ID %in% switched_students$Student.ID) %>%
# Only consider semesters before the student's most recent term
filter(Term.Code < max(Term.Code)) %>%
group_by(Student.ID) %>%
# Find the first semester when the student switched their major (not "BA Major")
mutate(first_switch_semester = min(Term.Code[!is.na(coalesce(Major.1, Major.2, Major.3)) &
!coalesce(Major.1, Major.2, Major.3) == "BA Major"])) %>%
ungroup(), by = "Student.ID") %>%
# Only keep students who actually switched majors
filter(!is.na(first_switch_semester)) %>%
# Calculate the distinct count of semesters attended before the switch
mutate(distinct_semesters_before_switch = length(unique(Term.Code[Term.Code < first_switch_semester])))
# Step 2: Count how many students switched majors after X semesters
distribution_of_switches <- switched_students_with_semesters %>%
group_by(distinct_semesters_before_switch) %>%
summarise(student_count = n(), .groups = 'drop') %>%
arrange(distinct_semesters_before_switch)
# Step 3: Display the distribution of students in a nice format with kable and kableExtra
knitr::kable(distribution_of_switches,
col.names = c("Distinct Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Distinct Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify the first semester the student switched majors
switched_students_with_semesters <- switched_students |>
left_join(
BA |>
filter(Student.ID %in% switched_students$Student.ID) |>
group_by(Student.ID) |>
# Find the first semester when the student switched their major (not "BA Major")
mutate(first_switch_semester = min(Term.Code[coalesce(Major.1, Major.2, Major.3) != "BA Major" &
Term.Code < max(Term.Code)])) |>
ungroup(),
by = "Student.ID"
) |>
# Only keep students who actually switched majors
filter(!is.na(first_switch_semester)) |>
# Calculate the distinct count of semesters attended before the switch
mutate(distinct_semesters_before_switch = map_int(Student.ID, ~ {
length(unique(BA$Term.Code[BA$Student.ID == .x & BA$Term.Code < first_switch_semester]))
}))
# Step 2: Count how many students switched majors after X semesters
distribution_of_switches <- switched_students_with_semesters |>
group_by(distinct_semesters_before_switch) |>
summarise(student_count = n(), .groups = 'drop') |>
arrange(distinct_semesters_before_switch)
# Step 3: Display the distribution of students in a nice format with kable and kableExtra
if(require(knitr)==FALSE) install.packages("knitr")
if(require(kableExtra)==FALSE) install.packages("kableExtra")
knitr::kable(distribution_of_switches,
col.names = c("Distinct Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Distinct Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify students who switched from Business Analytics to another major
switched_students <- BA |>
group_by(Student.ID) |>
arrange(desc(Term.Code)) |>
mutate(recent_major = coalesce(Major.1, Major.2, Major.3)) |>
filter(recent_major != "BA Major") |>
summarise(recent_major = first(recent_major), .groups = 'drop')
# Step 2: Count the number of students who switched majors
switched_major_display <- switched_students |>
group_by(recent_major) |>
summarise(student_count = n(), .groups = 'drop') |>
arrange(desc(student_count))
# Step 3: Identify the first semester the student switched majors
switched_students_with_semesters <- switched_students |>
left_join(
BA |>
filter(Student.ID %in% switched_students$Student.ID) |>
group_by(Student.ID) |>
arrange(Term.Code) |>
mutate(first_switch_semester = min(Term.Code[coalesce(Major.1, Major.2, Major.3) != "BA Major"])) |>
ungroup(),
by = "Student.ID"
) |>
filter(!is.na(first_switch_semester)) |>
mutate(distinct_semesters_before_switch = map_int(Student.ID, ~ {
length(unique(BA$Term.Code[BA$Student.ID == .x & BA$Term.Code < first_switch_semester]))
}))
# Step 4: Count how many students switched majors after X semesters
distribution_of_switches <- switched_students_with_semesters |>
group_by(distinct_semesters_before_switch) |>
summarise(student_count = n(), .groups = 'drop') |>
arrange(distinct_semesters_before_switch)
# Display the tables
if(require(knitr)==FALSE) install.packages("knitr")
if(require(kableExtra)==FALSE) install.packages("kableExtra")
# Display switched major table
knitr::kable(switched_major_display,
col.names = c("Recent Major", "Student Count"),
caption = "Students Who Switched Majors") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")
# Display distribution of switches table
knitr::kable(distribution_of_switches,
col.names = c("Distinct Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Distinct Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")
# Step 1: Identify the first semester the student switched majors
switched_students_with_semesters <- switched_students |>
left_join(
BA |>
filter(Student.ID %in% switched_students$Student.ID) |>
group_by(Student.ID) |>
arrange(Term.Code) |>
# Find the first semester when the student switched their major (not "BA Major")
mutate(first_switch_semester = min(Term.Code[coalesce(Major.1, Major.2, Major.3) != "BA Major"])) |>
ungroup(),
by = "Student.ID"
) |>
filter(!is.na(first_switch_semester)) |>
# Calculate the distinct count of semesters attended before the switch
mutate(distinct_semesters_before_switch = map_int(Student.ID, ~ {
length(unique(BA$Term.Code[BA$Student.ID == .x & BA$Term.Code < first_switch_semester]))
}))
# Step 2: Count how many students switched majors after X semesters
distribution_of_switches <- switched_students_with_semesters |>
group_by(distinct_semesters_before_switch) |>
summarise(student_count = n(), .groups = 'drop') |>
arrange(distinct_semesters_before_switch)
# Display the distribution of switches table in a pretty format
if(require(knitr)==FALSE) install.packages("knitr")
if(require(kableExtra)==FALSE) install.packages("kableExtra")
knitr::kable(distribution_of_switches,
col.names = c("Distinct Semesters Before Switch", "Student Count"),
caption = "Distribution of Students Who Switched Majors After X Distinct Semesters") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
View(graduated_students)
write.csv(graduated_students, "~/Downloads/BAgraduates.csv")
