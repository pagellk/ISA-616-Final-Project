kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Identify students who graduated in 9 semesters
students_9_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 9) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the IS dataframe for these students
students_9_semesters_data <- IS |>
dplyr::filter(Student.ID %in% students_9_semesters$Student.ID)
# Step 3: Filter for students who have "IS Major" in their final term
students_with_is_major <- students_9_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" | Major.2 == "IS Major" | Major.3 == "IS Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_9_semesters <- students_9_semesters_data |>
dplyr::filter(Student.ID %in% students_with_is_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hours, Cum.UG.Crs.GPA, All_Majors)
# Step 7: Filter out student ID 8226483
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::filter(Student.ID != 8226483)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_9_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Identify students who graduated in 9 semesters
students_9_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 9) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the IS dataframe for these students
students_9_semesters_data <- IS |>
dplyr::filter(Student.ID %in% students_9_semesters$Student.ID)
# Step 3: Filter for students who have "IS Major" in their final term
students_with_is_major <- students_9_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" |
Major.2 == "IS Major" |
Major.3 == "IS Major" |
Major.1 == "Cybersecurity Mgt Major" |
Major.2 == "Cybersecurity Mgt Major" |
Major.3 == "Cybersecurity Mgt Major")  |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_9_semesters <- students_9_semesters_data |>
dplyr::filter(Student.ID %in% students_with_is_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hours, Cum.UG.Crs.GPA, All_Majors)
# Step 7: Filter out student ID 8226483
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::filter(Student.ID != 8226483)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_9_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_9_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hours`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_9_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hours`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::row_spec(0, background = "#C8102E", color = "white")  # Apply colored header
# Step 1: Identify students who graduated with a "IS Major"
students_with_is_major <- IS |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" |
Major.2 == "IS Major" |
Major.3 == "IS Major" |
Major.1 == "Cybersecurity Mgt Major" |
Major.2 == "Cybersecurity Mgt Major" |
Major.3 == "Cybersecurity Mgt Major")|>
dplyr::ungroup()
# Step 2: Calculate the average GPA for these students
average_gpa_is_major <- students_with_is_major |>
dplyr::summarize(Average_GPA = mean(Cum.UG.Crs.GPA, na.rm = TRUE))
# Display the average GPA
knitr::kable(average_gpa_is_major,
col.names = c("Average GPA"),
caption = "Average GPA for Students Graduated with BA Major") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Identify students who graduated with a "IS Major"
students_with_is_major <- IS |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" |
Major.2 == "IS Major" |
Major.3 == "IS Major" |
Major.1 == "Cybersecurity Mgt Major" |
Major.2 == "Cybersecurity Mgt Major" |
Major.3 == "Cybersecurity Mgt Major")|>
dplyr::ungroup()
# Step 2: Calculate the average GPA for these students
average_gpa_is_major <- students_with_is_major |>
dplyr::summarize(Average_GPA = mean(Cum.UG.Crs.GPA, na.rm = TRUE))
# Display the average GPA
knitr::kable(average_gpa_is_major,
col.names = c("Average GPA"),
caption = "Average GPA for Students Graduated with IS Major") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Identify students who graduated in 6 semesters
students_9_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 9) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the IS dataframe for these students
students_9_semesters_data <- IS |>
dplyr::filter(Student.ID %in% students_9_semesters$Student.ID)
# Step 3: Filter for students who have "IS Major" in their final term
students_with_is_major <- students_9_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" |
Major.2 == "IS Major" |
Major.3 == "IS Major" |
Major.1 == "Cybersecurity Mgt Major" |
Major.2 == "Cybersecurity Mgt Major" |
Major.3 == "Cybersecurity Mgt Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_9_semesters <- students_9_semesters_data |>
dplyr::filter(Student.ID %in% students_with_is_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hours, Cum.UG.Crs.GPA, All_Majors)
# Step 7: Filter out students who graduated in term 202510
graduated_students_9_semesters <- graduated_students_9_semesters |>
dplyr::filter(Term.Code != 202510)
# Step 8: Calculate the credit hours per semester
credit_hours_per_semester <- students_9_semesters_data |>
dplyr::filter(Student.ID %in% graduated_students_9_semesters$Student.ID) |>
dplyr::arrange(Student.ID, Term.Code) |>
dplyr::group_by(Student.ID) |>
dplyr::mutate(Credit_Hours_Semester = Cum.Credit.Hours - dplyr::lag(Cum.Credit.Hours, default = 0)) |>
dplyr::ungroup()
# Step 9: Calculate the aggregated average credit hours per semester
total_credit_hours <- sum(credit_hours_per_semester$Credit_Hours_Semester, na.rm = TRUE)
total_semesters <- nrow(credit_hours_per_semester)
avg_credit_hours_per_semester_aggregated <- total_credit_hours / total_semesters
# Display the aggregated average credit hours per semester
knitr::kable(data.frame(Average_Credit_Hours_Per_Semester = avg_credit_hours_per_semester_aggregated),
col.names = c("Average Credit Hours per Semester"),
caption = "Aggregated Average Credit Hours per Semester for Graduated Students") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Identify students who graduated in 10 semesters
students_10_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 10) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the IS dataframe for these students
students_10_semesters_data <- IS |>
dplyr::filter(Student.ID %in% students_10_semesters$Student.ID)
# Step 3: Filter for students who have "IS Major" in their final term
students_with_is_major <- students_10_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" | Major.2 == "IS Major" | Major.3 == "IS Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_10_semesters <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% students_with_is_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hours, Cum.UG.Crs.GPA, All_Majors)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_10_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Identify students who graduated in 10 semesters
students_10_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 10) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the IS dataframe for these students
students_10_semesters_data <- IS |>
dplyr::filter(Student.ID %in% students_10_semesters$Student.ID)
# Step 3: Filter for students who have "IS Major" in their final term
students_with_is_major <- students_10_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" |
Major.2 == "IS Major" |
Major.3 == "IS Major" |
Major.1 == "Cybersecurity Mgt Major" |
Major.2 == "Cybersecurity Mgt Major" |
Major.3 == "Cybersecurity Mgt Major")|>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_10_semesters <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% students_with_is_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hours, Cum.UG.Crs.GPA, All_Majors)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_10_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_10_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hours`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_10_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hours`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_9_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::row_spec(0, background = "#C8102E", color = "white")  # Apply colored header
# Step 1: Identify students who graduated in 10 semesters
students_10_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 10) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the IS dataframe for these students
students_10_semesters_data <- IS |>
dplyr::filter(Student.ID %in% students_10_semesters$Student.ID)
# Step 3: Filter for students who have "IS Major" in their final term
students_with_is_major <- students_10_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "IS Major" | Major.2 == "IS Major" | Major.3 == "IS Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_10_semesters <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% students_with_is_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hours, Cum.UG.Crs.GPA, All_Majors)
# Step 7: Filter out students who graduated in term 202510
graduated_students_10_semesters <- graduated_students_10_semesters |>
dplyr::filter(Term.Code != 202510)
# Step 8: Calculate the credit hours per semester
credit_hours_per_semester <- students_10_semesters_data |>
dplyr::filter(Student.ID %in% graduated_students_10_semesters$Student.ID) |>
dplyr::arrange(Student.ID, Term.Code) |>
dplyr::group_by(Student.ID) |>
dplyr::mutate(Credit_Hours_Semester = Cum.Credit.Hours - dplyr::lag(Cum.Credit.Hours, default = 0)) |>
dplyr::ungroup()
# Step 9: Calculate the aggregated average credit hours per semester
total_credit_hours <- sum(credit_hours_per_semester$Credit_Hours_Semester, na.rm = TRUE)
total_semesters <- nrow(credit_hours_per_semester)
avg_credit_hours_per_semester_aggregated <- total_credit_hours / total_semesters
# Display the aggregated average credit hours per semester
knitr::kable(data.frame(Average_Credit_Hours_Per_Semester = avg_credit_hours_per_semester_aggregated),
col.names = c("Average Credit Hours per Semester"),
caption = "Aggregated Average Credit Hours per Semester for Graduated Students") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::row_spec(0, background = "#C8102E", color="white")  # Light blue header
# Step 1: Ensure unique term codes for each student
IS_unique_terms <- IS |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE)
# Step 2: Calculate the number of semesters completed for each student up to each term
IS_with_semesters <- IS_unique_terms |>
dplyr::group_by(Student.ID) |>
dplyr::arrange(Term.Code) |>
dplyr::mutate(Semesters_Completed = dplyr::row_number() - 1) |>
dplyr::ungroup()
# Step 3: Add classification based on the number of semesters completed
IS_with_classification <- IS_with_semesters |>
dplyr::mutate(Classification = dplyr::case_when(
Semesters_Completed < 2 ~ "Freshman",
Semesters_Completed == 2 | Semesters_Completed == 3 ~ "Sophomore",
Semesters_Completed == 4 | Semesters_Completed == 5 ~ "Junior",
Semesters_Completed == 6 | Semesters_Completed == 7 ~ "Senior",
Semesters_Completed >= 8 ~ "Super Senior"
)) |>
dplyr::mutate(Classification = factor(Classification, levels = c("Freshman", "Sophomore", "Junior", "Senior", "Super Senior"))) |>
dplyr::arrange(Student.ID, Term.Code)  # Sort by Student.ID and Term.Code
# Display a sample of the updated dataset
head(IS_with_classification)
