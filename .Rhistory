Semesters_Completed == 4 | Semesters_Completed == 5 ~ "Junior",
Semesters_Completed == 6 | Semesters_Completed == 7 ~ "Senior",
Semesters_Completed >= 8 ~ "Super Senior"
)) |>
dplyr::mutate(Classification = factor(Classification, levels = c("Freshman", "Sophomore", "Junior", "Senior", "Super Senior"))) |>
dplyr::arrange(Student.ID, Term.Code)  # Sort by Student.ID and Term.Code
# Display a sample of the updated dataset
head(IS_with_classification)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE, out.width = "100%")
#package initialization
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(DataExplorer, # For explorer and cleaning data by visualizing missing values.
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl, #to read Excel files
networkD3 # to create a Sankey Plot
) # For creating dummy variables of categorical variables automatically.)
# Read data
BA_Majors=read_excel("BA Major Students - Majors.xlsx")
# Read data
BA_Majors=read_excel("/initial-data/BA Major Students - Majors.xlsx")
# Read data
BA_Majors=read_excel("initial-data/BA Major Students - Majors.xlsx")
# Fill in the blank cells created from the format of the data
BA_Majors=BA_Majors %>%
fill(c(`Student ID`:`Term Code`),.direction="down")
#Create a separate column for each major.  Unit of analysis here is student by Term Code
BA_Majors=BA_Majors %>%
group_by(`Student ID`,`Term Code`) %>%
mutate(Major_Number=paste("Major",row_number())) %>%
pivot_wider(names_from=Major_Number, values_from=`BA Major`)
# Set the Cohort Term to the smallest observed value for a given student.
BA_Majors=BA_Majors %>%
group_by(`Student ID`) %>%
mutate(`Cohort Term`=min(`Cohort Term`))
head(BA_Majors)
paste("The number of rows is ",nrow(BA_Majors))
paste("The number of unique students is ",length(unique((BA_Majors$`Student ID`))))
BA_Majors$`Major 4` = NULL
BA_Majors$`Major 5` = NULL
BA_Majors$`Major 6` = NULL
head(BA_Majors)
write.csv(BA_Majors,"data-clean/BA_Majors.csv")
# Read data
BA_Grades=read_excel("initial-data/BA Major Students - Grades -updated.xlsx")
# Fill in the blank cells created from the format of the data
BA_Grades = BA_Grades %>%
fill(c(`Student ID`),.direction="down")
head(BA_Grades)
tail(BA_Grades)
paste("The number of unique students is ",length(unique(BA_Grades$`Student ID`)))
write.csv(BA_Grades,"data-clean/BA_Grades.csv")
# Read data
BA_Attributes=read_excel("initial-data/BA Major Students - Attributes and GPA.xlsx")
# Fill in the blank cells created from the format of the data
BA_Attributes = BA_Attributes %>%
fill(c(`Student ID`:`First Generation Indicator`),.direction="down")
paste("The number of unique students is ",length(unique(BA_Attributes$`Student ID`)))
head(BA_Attributes)
test=BA_Attributes %>%
filter(is.na('Term UG Crs GPA'))
paste("The number of students with no grades ",length(unique(test$`Student ID`)))
write.csv(BA_Attributes,"data-clean/BA_Attributes.csv")
ba_major_crhr = read_excel("initial-data/BA Major Students - Credit Hours.xlsx")
ba_major_crhr = ba_major_crhr %>% fill(c(`Student ID`),.direction="down")
paste("The number of unique students is ",length(unique(ba_major_crhr$`Student ID`)))
head(ba_major_crhr)
write.csv(ba_major_crhr, "data-clean/BA_CreditHours.csv")
ba_major_degrees_awarded = read_excel('initial-data/BA Major Students - Degrees Awarded.xlsx')
ba_major_degrees_awarded = ba_major_degrees_awarded %>%
fill(c(`Student ID`:`Term Code`:
`Degree Type`: `Degree`),.direction="down")
head(ba_major_degrees_awarded)
# Step 1: Create a separate column for each major (unit of analysis is student by Term Code)
ba_major_degrees_awarded <- ba_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(Major_Number = paste("Major", row_number())) %>%
pivot_wider(names_from = Major_Number, values_from = `Major`)
# Step 2: Ensure each student has only one row per term with all their majors side by side
# We'll use mutate to keep all columns, including Semesters to Degree Average
ba_major_degrees_awarded <- ba_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(across(starts_with("Major"), ~ first(na.omit(.)), .names = "{.col}")) %>%
ungroup()
# Step 3: Set the Cohort Term to the smallest observed Term Code for each student
ba_major_degrees_awarded <- ba_major_degrees_awarded %>%
group_by(`Student ID`) %>%  # Group by Student ID to find the minimum Term Code per student
mutate(`Cohort Term` = min(`Term Code`)) %>%  # Set Cohort Term to the smallest Term Code for each student
ungroup()  # Ungroup to return to a regular data frame
ba_major_degrees_awarded$`Student Division Code` = NULL
ba_major_degrees_awarded$`Student Department Code` = NULL
ba_major_degrees_awarded$`AW - Major Count` = NULL
ba_major_degrees_awarded$`Cohort Term` = NULL
# View the result
head(ba_major_degrees_awarded)
value_counts <- table(ba_major_degrees_awarded$`Semesters to Degree Average`)
# Print the value counts
print(value_counts)
write.csv(ba_major_degrees_awarded, "data-clean/BADegrees.csv")
# Read data
IS_Majors=read_excel("initial-data/IS Major Students - Majors.xlsx")
# Fill in the blank cells created from the format of the data
IS_Majors=IS_Majors %>%
fill(c(`Student ID`:`Term Code`),.direction="down")
colnames(IS_Majors)
#Create a separate column for each major.  Unit of analysis here is student by Term Code
IS_Majors=IS_Majors %>%
group_by(`Student ID`,`Term Code`) %>%
mutate(Major_Number=paste("Major",row_number())) %>%
pivot_wider(names_from=Major_Number, values_from=`Major`)
# Set the Cohort Term to the smallest observed value for a given student.
IS_Majors=IS_Majors %>%
group_by(`Student ID`) %>%
mutate(`Cohort Term`=min(`Cohort Term`))
head(IS_Majors)
paste("The number of rows is ",nrow(IS_Majors))
paste("The number of unique students is ",length(unique((IS_Majors$`Student ID`))))
IS_Majors$`Major 4` = NULL
IS_Majors$`Major 5` = NULL
IS_Majors$`Major 6` = NULL
head(IS_Majors)
write.csv(IS_Majors,"data-clean/IS_Majors.csv")
# Read data
IS_Grades=read_excel("initial-data/IS Major Students - Grades -updated.xlsx")
# Fill in the blank cells created from the format of the data
IS_Grades = IS_Grades %>%
fill(c(`Student ID`),.direction="down")
head(IS_Grades)
tail(IS_Grades)
paste("The number of unique students is ",length(unique(IS_Grades$`Student ID`)))
write.csv(IS_Grades,"data-clean/IS_Grades.csv")
# Read data
IS_Attributes=read_excel("initial-data/IS Major Students - Attributes and GPA.xlsx")
# Fill in the blank cells created from the format of the data
IS_Attributes = IS_Attributes %>%
fill(c(`Student ID`:`First Generation Indicator`),.direction="down")
paste("The number of unique students is ",length(unique(IS_Attributes$`Student ID`)))
head(IS_Attributes)
test=IS_Attributes %>%
filter(is.na('Term UG Crs GPA'))
paste("The number of students with no grades ",length(unique(test$`Student ID`)))
write.csv(IS_Attributes,"data-clean/IS_Attributes.csv")
is_major_crhr = read_excel("initial-data/IS Major Students - Credit Hours.xlsx")
is_major_crhr = is_major_crhr %>% fill(c(`Student ID`),.direction="down")
paste("The number of unique students is ",length(unique(is_major_crhr$`Student ID`)))
head(is_major_crhr)
write.csv(is_major_crhr, "data-clean/IS_CreditHours.csv")
is_major_degrees_awarded = read_excel('initial-data/IS Major Students - Degrees Awarded (1).xlsx')
is_major_degrees_awarded = is_major_degrees_awarded %>%
fill(c(`Student ID`:`Term Code`:
`Degree Type`: `Degree`),.direction="down")
head(is_major_degrees_awarded)
# Step 1: Create a separate column for each major (unit of analysis is student by Term Code)
is_major_degrees_awarded <- is_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(Major_Number = paste("Major", row_number())) %>%
pivot_wider(names_from = Major_Number, values_from = `Major`)
# Step 2: Ensure each student has only one row per term with all their majors side by side
# We'll use mutate to keep all columns, including Semesters to Degree Average
is_major_degrees_awarded <- is_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(across(starts_with("Major"), ~ first(na.omit(.)), .names = "{.col}")) %>%
ungroup()
# Step 3: Set the Cohort Term to the smallest observed Term Code for each student
is_major_degrees_awarded <- is_major_degrees_awarded %>%
group_by(`Student ID`) %>%  # Group by Student ID to find the minimum Term Code per student
mutate(`Cohort Term` = min(`Term Code`)) %>%  # Set Cohort Term to the smallest Term Code for each student
ungroup()  # Ungroup to return to a regular data frame
is_major_degrees_awarded <- is_major_degrees_awarded[-211, ]
is_major_degrees_awarded$`Student Division Code` = NULL
is_major_degrees_awarded$`Student Department Code` = NULL
is_major_degrees_awarded$`AW - Major Count` = NULL
is_major_degrees_awarded$`Cohort Term` = NULL
is_major_degrees_awarded <- is_major_degrees_awarded |>
dplyr::rename(
Term.Code.Graduated = `Term Code`
)
# View the result
head(is_major_degrees_awarded)
value_counts <- table(is_major_degrees_awarded$`Semesters to Degree Average`)
# Print the value counts
print(value_counts)
write.csv(is_major_degrees_awarded, "data-clean/ISDegrees.csv")
## Merge BA Datasets together
## BA Degrees
BA_Degrees = read.csv('initial-data/data-clean/BADegrees.csv')
## Merge BA Datasets together
## BA Degrees
BA_Degrees = read.csv('data-clean/BADegrees.csv')
BA_Degrees <- BA_Degrees |>
dplyr::select(-c('X', 'Major.1', 'Major.2', 'Major.3', 'Degree.Type', 'Degree'))
BA_Degrees <- BA_Degrees[complete.cases(BA_Degrees), ]
BA_Degrees$`Student.ID` <- as.integer(BA_Degrees$`Student.ID`)
## rename columm
BA_Degrees <- BA_Degrees |>
dplyr::rename(`Term.Code.Graduated` = `Term.Code`)
head(BA_Degrees)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE, out.width = "100%")
#package initialization
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(DataExplorer, # For explorer and cleaning data by visualizing missing values.
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl, #to read Excel files
networkD3 # to create a Sankey Plot
) # For creating dummy variables of categorical variables automatically.)
# Read data
BA_Majors=read_excel("initial-data/BA Major Students - Majors.xlsx")
# Fill in the blank cells created from the format of the data
BA_Majors=BA_Majors %>%
fill(c(`Student ID`:`Term Code`),.direction="down")
#Create a separate column for each major.  Unit of analysis here is student by Term Code
BA_Majors=BA_Majors %>%
group_by(`Student ID`,`Term Code`) %>%
mutate(Major_Number=paste("Major",row_number())) %>%
pivot_wider(names_from=Major_Number, values_from=`BA Major`)
# Set the Cohort Term to the smallest observed value for a given student.
BA_Majors=BA_Majors %>%
group_by(`Student ID`) %>%
mutate(`Cohort Term`=min(`Cohort Term`))
head(BA_Majors)
paste("The number of rows is ",nrow(BA_Majors))
paste("The number of unique students is ",length(unique((BA_Majors$`Student ID`))))
BA_Majors$`Major 4` = NULL
BA_Majors$`Major 5` = NULL
BA_Majors$`Major 6` = NULL
head(BA_Majors)
write.csv(BA_Majors,"data-clean/BA_Majors.csv")
# Read data
BA_Grades=read_excel("initial-data/BA Major Students - Grades -updated.xlsx")
# Fill in the blank cells created from the format of the data
BA_Grades = BA_Grades %>%
fill(c(`Student ID`),.direction="down")
head(BA_Grades)
tail(BA_Grades)
paste("The number of unique students is ",length(unique(BA_Grades$`Student ID`)))
write.csv(BA_Grades,"data-clean/BA_Grades.csv")
# Read data
BA_Attributes=read_excel("initial-data/BA Major Students - Attributes and GPA.xlsx")
# Fill in the blank cells created from the format of the data
BA_Attributes = BA_Attributes %>%
fill(c(`Student ID`:`First Generation Indicator`),.direction="down")
paste("The number of unique students is ",length(unique(BA_Attributes$`Student ID`)))
head(BA_Attributes)
test=BA_Attributes %>%
filter(is.na('Term UG Crs GPA'))
paste("The number of students with no grades ",length(unique(test$`Student ID`)))
write.csv(BA_Attributes,"data-clean/BA_Attributes.csv")
ba_major_crhr = read_excel("initial-data/BA Major Students - Credit Hours.xlsx")
ba_major_crhr = ba_major_crhr %>% fill(c(`Student ID`),.direction="down")
paste("The number of unique students is ",length(unique(ba_major_crhr$`Student ID`)))
head(ba_major_crhr)
write.csv(ba_major_crhr, "data-clean/BA_CreditHours.csv")
ba_major_degrees_awarded = read_excel('initial-data/BA Major Students - Degrees Awarded.xlsx')
ba_major_degrees_awarded = ba_major_degrees_awarded %>%
fill(c(`Student ID`:`Term Code`:
`Degree Type`: `Degree`),.direction="down")
head(ba_major_degrees_awarded)
# Step 1: Create a separate column for each major (unit of analysis is student by Term Code)
ba_major_degrees_awarded <- ba_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(Major_Number = paste("Major", row_number())) %>%
pivot_wider(names_from = Major_Number, values_from = `Major`)
# Step 2: Ensure each student has only one row per term with all their majors side by side
# We'll use mutate to keep all columns, including Semesters to Degree Average
ba_major_degrees_awarded <- ba_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(across(starts_with("Major"), ~ first(na.omit(.)), .names = "{.col}")) %>%
ungroup()
# Step 3: Set the Cohort Term to the smallest observed Term Code for each student
ba_major_degrees_awarded <- ba_major_degrees_awarded %>%
group_by(`Student ID`) %>%  # Group by Student ID to find the minimum Term Code per student
mutate(`Cohort Term` = min(`Term Code`)) %>%  # Set Cohort Term to the smallest Term Code for each student
ungroup()  # Ungroup to return to a regular data frame
ba_major_degrees_awarded$`Student Division Code` = NULL
ba_major_degrees_awarded$`Student Department Code` = NULL
ba_major_degrees_awarded$`AW - Major Count` = NULL
ba_major_degrees_awarded$`Cohort Term` = NULL
# View the result
head(ba_major_degrees_awarded)
value_counts <- table(ba_major_degrees_awarded$`Semesters to Degree Average`)
# Print the value counts
print(value_counts)
write.csv(ba_major_degrees_awarded, "data-clean/BADegrees.csv")
# Read data
IS_Majors=read_excel("initial-data/IS Major Students - Majors.xlsx")
# Fill in the blank cells created from the format of the data
IS_Majors=IS_Majors %>%
fill(c(`Student ID`:`Term Code`),.direction="down")
colnames(IS_Majors)
#Create a separate column for each major.  Unit of analysis here is student by Term Code
IS_Majors=IS_Majors %>%
group_by(`Student ID`,`Term Code`) %>%
mutate(Major_Number=paste("Major",row_number())) %>%
pivot_wider(names_from=Major_Number, values_from=`Major`)
# Set the Cohort Term to the smallest observed value for a given student.
IS_Majors=IS_Majors %>%
group_by(`Student ID`) %>%
mutate(`Cohort Term`=min(`Cohort Term`))
head(IS_Majors)
paste("The number of rows is ",nrow(IS_Majors))
paste("The number of unique students is ",length(unique((IS_Majors$`Student ID`))))
IS_Majors$`Major 4` = NULL
IS_Majors$`Major 5` = NULL
IS_Majors$`Major 6` = NULL
head(IS_Majors)
write.csv(IS_Majors,"data-clean/IS_Majors.csv")
# Read data
IS_Grades=read_excel("initial-data/IS Major Students - Grades -updated.xlsx")
# Fill in the blank cells created from the format of the data
IS_Grades = IS_Grades %>%
fill(c(`Student ID`),.direction="down")
head(IS_Grades)
tail(IS_Grades)
paste("The number of unique students is ",length(unique(IS_Grades$`Student ID`)))
write.csv(IS_Grades,"data-clean/IS_Grades.csv")
# Read data
IS_Attributes=read_excel("initial-data/IS Major Students - Attributes and GPA.xlsx")
# Fill in the blank cells created from the format of the data
IS_Attributes = IS_Attributes %>%
fill(c(`Student ID`:`First Generation Indicator`),.direction="down")
paste("The number of unique students is ",length(unique(IS_Attributes$`Student ID`)))
head(IS_Attributes)
test=IS_Attributes %>%
filter(is.na('Term UG Crs GPA'))
paste("The number of students with no grades ",length(unique(test$`Student ID`)))
write.csv(IS_Attributes,"data-clean/IS_Attributes.csv")
is_major_crhr = read_excel("initial-data/IS Major Students - Credit Hours.xlsx")
is_major_crhr = is_major_crhr %>% fill(c(`Student ID`),.direction="down")
paste("The number of unique students is ",length(unique(is_major_crhr$`Student ID`)))
head(is_major_crhr)
write.csv(is_major_crhr, "data-clean/IS_CreditHours.csv")
is_major_degrees_awarded = read_excel('initial-data/IS Major Students - Degrees Awarded (1).xlsx')
is_major_degrees_awarded = is_major_degrees_awarded %>%
fill(c(`Student ID`:`Term Code`:
`Degree Type`: `Degree`),.direction="down")
head(is_major_degrees_awarded)
# Step 1: Create a separate column for each major (unit of analysis is student by Term Code)
is_major_degrees_awarded <- is_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(Major_Number = paste("Major", row_number())) %>%
pivot_wider(names_from = Major_Number, values_from = `Major`)
# Step 2: Ensure each student has only one row per term with all their majors side by side
# We'll use mutate to keep all columns, including Semesters to Degree Average
is_major_degrees_awarded <- is_major_degrees_awarded %>%
group_by(`Student ID`, `Term Code`) %>%
mutate(across(starts_with("Major"), ~ first(na.omit(.)), .names = "{.col}")) %>%
ungroup()
# Step 3: Set the Cohort Term to the smallest observed Term Code for each student
is_major_degrees_awarded <- is_major_degrees_awarded %>%
group_by(`Student ID`) %>%  # Group by Student ID to find the minimum Term Code per student
mutate(`Cohort Term` = min(`Term Code`)) %>%  # Set Cohort Term to the smallest Term Code for each student
ungroup()  # Ungroup to return to a regular data frame
is_major_degrees_awarded <- is_major_degrees_awarded[-211, ]
is_major_degrees_awarded$`Student Division Code` = NULL
is_major_degrees_awarded$`Student Department Code` = NULL
is_major_degrees_awarded$`AW - Major Count` = NULL
is_major_degrees_awarded$`Cohort Term` = NULL
is_major_degrees_awarded <- is_major_degrees_awarded |>
dplyr::rename(
Term.Code.Graduated = `Term Code`
)
# View the result
head(is_major_degrees_awarded)
value_counts <- table(is_major_degrees_awarded$`Semesters to Degree Average`)
# Print the value counts
print(value_counts)
write.csv(is_major_degrees_awarded, "data-clean/ISDegrees.csv")
## Merge BA Datasets together
## BA Degrees
BA_Degrees = read.csv('data-clean/BADegrees.csv')
BA_Degrees <- BA_Degrees |>
dplyr::select(-c('X', 'Major.1', 'Major.2', 'Major.3', 'Degree.Type', 'Degree'))
BA_Degrees <- BA_Degrees[complete.cases(BA_Degrees), ]
BA_Degrees$`Student.ID` <- as.integer(BA_Degrees$`Student.ID`)
## rename columm
BA_Degrees <- BA_Degrees |>
dplyr::rename(`Term.Code.Graduated` = `Term.Code`)
head(BA_Degrees)
## BA Majors
BA_Majors = read.csv('data-clean/BA_Majors.csv')
head(BA_Majors)
BA_Majors <- BA_Majors |>
dplyr::select(-c('X', 'Enrolled.Student.Count'))
BA_Majors <- BA_Majors |>
dplyr::mutate(
`Major.1` = tidyr::replace_na(`Major.1`, 'None'),
`Major.2` = tidyr::replace_na(`Major.2`, 'None'),
`Major.3` = tidyr::replace_na(`Major.3`, 'None')
)
head(BA_Majors)
## merge degrees and majors together
BA <- dplyr::left_join(BA_Majors, BA_Degrees, by = 'Student.ID')
BA <- BA |>
dplyr::select(-c('Semesters.to.Degree.Average'))
# Determine the Term.Code.Graduated for each Student.ID
graduation_info <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Graduated_Term = dplyr::first(na.omit(`Term.Code.Graduated`)), .groups = 'drop')
# Fill NA values with the Term.Code.Graduated
BA <- BA |>
dplyr::left_join(graduation_info, by = "Student.ID") |>
dplyr::mutate(
`Term.Code.Graduated` = ifelse(is.na(`Term.Code.Graduated`), Graduated_Term, `Term.Code.Graduated`)
) |>
dplyr::select(-Graduated_Term)
head(BA)
BA_Credit_Hours = read.csv('data-clean/BA_CreditHours.csv')
# drop columns
BA_Credit_Hours <- BA_Credit_Hours |>
dplyr::select(-c('X', 'Term.UG.MU.Earned.CrHr', 'Term.UG.Overall.Earned.CrHr..MU.and.Non.MU.'))
# rename columns
BA_Credit_Hours <- BA_Credit_Hours |>
dplyr::rename(`Cum.Credit.Hrs` = `Cum.UG.Overall.Earned.CrHr..MU.and.Non.MU.`)
# fill na
BA_Credit_Hours <- BA_Credit_Hours |>
dplyr::mutate(`Cum.Credit.Hrs` = tidyr::replace_na(`Cum.Credit.Hrs`, 0))
head(BA_Credit_Hours)
## merge credit hours with BA dataset
BA <- dplyr::left_join(BA, BA_Credit_Hours, by = c("Student.ID", "Term.Code"))
BA <- BA |>
dplyr::arrange(`Student.ID`)
## filter out error
BA <- BA |>
dplyr::filter(`Major.1` != "None")
## replace NA Credit Hrs with 0
BA <- BA |>
dplyr::mutate_all(~ tidyr::replace_na(., 0))
head(BA)
BA_Attributes = read.csv('data-clean/BA_Attributes.csv')
# drop columns
BA_Attributes <- BA_Attributes |>
dplyr::select(-c('X', 'Gender', 'First.Generation.Indicator', 'Term.UG.Crs.GPA'))
## fill NA values
BA_Attributes <- BA_Attributes |>
dplyr::mutate(`Cum.UG.Crs.GPA` = ifelse(is.na(`Cum.UG.Crs.GPA`), "NA", `Cum.UG.Crs.GPA`))
head(BA_Attributes)
## merge attributes and BA data set together
BA <- dplyr::left_join(BA, BA_Attributes, by = c("Student.ID", "Term.Code"))
BA <- BA |>
dplyr::arrange(`Student.ID`)
head(BA)
write.csv(BA, "data-clean/BA_Final.csv")
is_degrees= read.csv('data-clean/ISDegrees.csv')
is_degrees <- is_degrees |>
dplyr::select(-c("X", "Major.1", "Major.2", "Degree.Type", "Degree"))
is_degrees <- is_degrees |>
dplyr::mutate(Graduated = ifelse(!is.na(`Semesters.to.Degree.Average`), 1, 0))
is_degrees <- is_degrees |>
dplyr::filter(`Student.ID` != "Rows 1 - 255 (All Rows)")
is_degrees <- is_degrees |>
dplyr::mutate(Student.ID = as.integer(Student.ID))
head(is_degrees)
str(is_degrees)
is_credithours = read.csv('data-clean/IS_CreditHours.csv')
is_credithours <- is_credithours |>
dplyr::select(-c("X", "Term.UG.MU.Earned.CrHr", "Term.UG.Overall.Earned.CrHr..MU.and.Non.MU."))
is_credithours <- is_credithours |>
dplyr::rename(
`Cum.Credit.Hours` = `Cum.UG.Overall.Earned.CrHr..MU.and.Non.MU.`
)
is_credithours <- is_credithours |>
tidyr::replace_na(list(`Cum.Credit.Hours` = 0))
head(is_credithours)
is_majors = read.csv('data-clean/IS_Majors.csv')
is_majors <- is_majors |>
dplyr::select(-c("X", "Enrolled.Student.Count"))
is_majors <- is_majors |>
tidyr::replace_na(list(
`Major.1` = "None",
`Major.2` = "None",
`Major.3` = "None"
))
head(is_majors)
IS <- dplyr::left_join(is_majors, is_degrees, by = "Student.ID")
IS <- IS |>
dplyr::select(-c("Semesters.to.Degree.Average"))
# Determine the Term.Code.Graduated for each Student.ID
graduation_info <- IS |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Graduated_Term = dplyr::first(na.omit(`Term.Code.Graduated`)), .groups = 'drop')
# Fill NA values with the Term.Code.Graduated
IS <- IS |>
dplyr::left_join(graduation_info, by = "Student.ID") |>
dplyr::mutate(
`Term.Code.Graduated` = ifelse(is.na(`Term.Code.Graduated`), Graduated_Term, `Term.Code.Graduated`)
) |>
dplyr::select(-Graduated_Term)
head(IS)
IS <- dplyr::left_join(IS, is_credithours, by = c("Student.ID", "Term.Code"))
IS <- IS |>
dplyr::filter(`Major.1` != "None")
head(IS)
is_attributes = read.csv('data-clean/IS_Attributes.csv')
is_attributes <- is_attributes |>
dplyr::select(-c("X", "Gender", "First.Generation.Indicator", "Term.UG.Crs.GPA"))
is_attributes <- is_attributes |>
tidyr::replace_na(list(`Cum.UG.Crs.GPA` = 0))
head(is_attributes)
IS <- dplyr::left_join(IS, is_attributes, by = c("Student.ID", "Term.Code"))
head(IS)
write.csv(IS, "data-clean/IS_Final.csv")
