# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-X, -max_term_code, -graduated, -Term.Code.Graduated)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_6_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "All Majors", "Cum. Credit Hours", "Cumulative GPA", "Grade Classification"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: Concatenate majors into a single column, excluding "None"
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::rowwise() |>
dplyr::mutate(All_Majors = paste(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"]), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(-Major.1, -Major.2, -Major.3)
# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-X, -max_term_code, -graduated, -Term.Code.Graduated, -grade_classification)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_6_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum. Credit Hours`, na.rm = TRUE))
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE))
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cumulative GPA`, na.rm = TRUE))
View(graduated_students_6_semesters)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE))
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE))
# Calculate the number of majors a student has when they graduate
majors_at_graduation <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(mean_num_majors = mean(num_majors, na.rm = TRUE))
# Display the summary
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits$mean_credits,
`Mean Graduation GPA` = mean_graduation_gpa$mean_gpa,
`Mean Number of Majors at Graduation` = majors_at_graduation$mean_num_majors
)
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum. Credit Hours`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.CreditHrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa)
# Calculate the mean number of majors a student has when they graduate
mean_num_majors <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(mean_num_majors = mean(num_majors, na.rm = TRUE)) |>
dplyr::pull(mean_num_majors)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Mean Number of Majors at Graduation` = mean_num_majors
)
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.CreditHrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)
# Calculate the percentage of students who graduated with more than one major
percentage_more_than_one_major <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1) / n() * 100) |>
dplyr::pull(more_than_one_major)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: Collapse majors into a single column for each row (ensuring no duplicates)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(-Major.1, -Major.2, -Major.3)
# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-X, -max_term_code, -graduated, -Term.Code.Graduated, -grade_classification)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_6_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-X, -max_term_code, -graduated, -Term.Code.Graduated, -grade_classification)
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-max_term_code, -graduated, -Term.Code.Graduated, -grade_classification)
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-graduated, -Term.Code.Graduated, -grade_classification)
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Step 6: Drop unnecessary columns
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-Term.Code.Graduated, -grade_classification)
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_6_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Step 7: Drop unnecessary columns (if any)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::select(-X, -max_term_code, -graduated, -Term.Code.Graduated, -grade_classification)
# Step 1: Identify students who graduated in 6 semesters
students_6_semesters <- semester_counts |>
dplyr::filter(Semester_Count == 6) |>
dplyr::select(Student.ID)
# Step 2: Get the rows from the BA dataframe for these students
students_6_semesters_data <- BA |>
dplyr::filter(Student.ID %in% students_6_semesters$Student.ID)
# Step 3: Filter for students who have "BA Major" in their final term
students_with_ba_major <- students_6_semesters_data |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::filter(Major.1 == "BA Major" | Major.2 == "BA Major" | Major.3 == "BA Major") |>
dplyr::ungroup()
# Step 4: Select only the first and last row for each Student.ID (first and last semester)
graduated_students_6_semesters <- students_6_semesters_data |>
dplyr::filter(Student.ID %in% students_with_ba_major$Student.ID) |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == min(Term.Code) | Term.Code == max(Term.Code)) |>
dplyr::ungroup()
# Step 5: For the first and last semester, collapse majors into a single column (one for each row)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID, Term.Code) |>
dplyr::mutate(All_Majors = paste(unique(na.omit(c(Major.1, Major.2, Major.3)[c(Major.1, Major.2, Major.3) != "None"])), collapse = ", ")) |>
dplyr::ungroup()
# Step 6: Remove duplicate rows by Student.ID and Term.Code (to avoid repeated majors for students with multiple majors)
graduated_students_6_semesters <- graduated_students_6_semesters |>
dplyr::distinct(Student.ID, Term.Code, .keep_all = TRUE) |>
dplyr::select(Student.ID, Cohort.Term, Term.Code, Cum.Credit.Hrs, Cum.UG.Crs.GPA, All_Majors)
# Display the distribution in a formatted table with a colored header
knitr::kable(graduated_students_6_semesters,
col.names = c("Student ID", "Cohort Term", "Term Code", "Cumulative Credit Hours", "Cumulative GPA", "Major(s)"),
caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light blue header
# Calculate the mean number of credit hours during the first semester
mean_first_semester_credits <- graduated_students_6_semesters |>
dplyr::filter(Term.Code == Cohort.Term) |>
dplyr::summarize(mean_credits = mean(`Cum.Credit.Hrs`, na.rm = TRUE)) |>
dplyr::pull(mean_credits)
# Calculate the mean GPA at graduation
mean_graduation_gpa <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::summarize(mean_gpa = mean(`Cum.UG.Crs.GPA`, na.rm = TRUE)) |>
dplyr::pull(mean_gpa) |>
mean(na.rm = TRUE)  # Get the overall mean across all students
# Calculate the percentage of students who graduated with more than one major
# We only want one result for the percentage, not grouped by Student.ID
percentage_more_than_one_major <- graduated_students_6_semesters |>
dplyr::group_by(Student.ID) |>
dplyr::filter(Term.Code == max(Term.Code)) |>
dplyr::mutate(num_majors = stringr::str_count(All_Majors, ", ") + 1) |>
dplyr::summarize(more_than_one_major = sum(num_majors > 1)) |>
dplyr::ungroup() |>
dplyr::summarize(percentage = (sum(more_than_one_major > 0) / n()) * 100) |>
dplyr::pull(percentage)
# Create a summary table with a single row
summary_table <- tibble::tibble(
`Mean First Semester Credits` = mean_first_semester_credits,
`Mean Graduation GPA` = mean_graduation_gpa,
`Percentage with More Than One Major` = percentage_more_than_one_major
)
# Display the summary table
knitr::kable(summary_table,
caption = "Summary of Student Graduation Data") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
)
