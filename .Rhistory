ggplot2::theme_minimal() +
ggplot2::scale_fill_manual(values = c("Fall" = "#6495ED", "Spring" = "#0047AB""))  # Custom colors for Fall and Spring
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop')
# Create a mapping of Term.Code to academic year and term type
result <- result |>
dplyr::mutate(
Academic_Year = dplyr::case_when(
Term.Code %in% c(202510, 202520) ~ "2024-2025",
Term.Code %in% c(202410, 202420) ~ "2023-2024",
Term.Code %in% c(202310, 202320) ~ "2022-2023",
Term.Code %in% c(202210, 202220) ~ "2021-2022",
Term.Code %in% c(202110, 202120) ~ "2020-2021",
Term.Code %in% c(202010, 202020) ~ "2019-2020",
Term.Code %in% c(201910, 201920) ~ "2018-2019",
Term.Code %in% c(201810, 201820) ~ "2017-2018",
TRUE ~ as.character(Term.Code)  # Default case if needed
),
Term_Type = dplyr::case_when(
stringr::str_ends(as.character(Term.Code), "10") ~ "Fall",
stringr::str_ends(as.character(Term.Code), "20") ~ "Spring",
TRUE ~ "Unknown"
)
) |>
dplyr::mutate(Term_Type = factor(Term_Type, levels = c("Spring", "Fall")))
# Create a stacked bar plot
ggplot2::ggplot(result, ggplot2::aes(x = Academic_Year, y = Num_Graduated, fill = Term_Type)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_text(ggplot2::aes(label = Num_Graduated), position = ggplot2::position_stack(vjust = 0.5), size = 3.5) +
ggplot2::labs(
title = "Number of BA Major Graduates by Term Code",
x = "Academic Year",
y = "Number of Graduates",
fill = "Term Type"
) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_manual(values = c("Fall" = "#6495ED", "Spring" = "#0047AB"))  # Custom colors for Fall and Spring
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop')
# Create a mapping of Term.Code to academic year and term type
result <- result |>
dplyr::mutate(
Academic_Year = dplyr::case_when(
Term.Code %in% c(202510, 202520) ~ "2024-2025",
Term.Code %in% c(202410, 202420) ~ "2023-2024",
Term.Code %in% c(202310, 202320) ~ "2022-2023",
Term.Code %in% c(202210, 202220) ~ "2021-2022",
Term.Code %in% c(202110, 202120) ~ "2020-2021",
Term.Code %in% c(202010, 202020) ~ "2019-2020",
Term.Code %in% c(201910, 201920) ~ "2018-2019",
Term.Code %in% c(201810, 201820) ~ "2017-2018",
TRUE ~ as.character(Term.Code)  # Default case if needed
),
Term_Type = dplyr::case_when(
stringr::str_ends(as.character(Term.Code), "10") ~ "Fall",
stringr::str_ends(as.character(Term.Code), "20") ~ "Spring",
TRUE ~ "Unknown"
)
) |>
dplyr::mutate(Term_Type = factor(Term_Type, levels = c("Spring", "Fall")))
# Create a stacked bar plot
ggplot2::ggplot(result, ggplot2::aes(x = Academic_Year, y = Num_Graduated, fill = Term_Type)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_text(ggplot2::aes(label = Num_Graduated), position = ggplot2::position_stack(vjust = 0.5), size = 3.5) +
ggplot2::labs(
title = "Number of BA Major Graduates by Term Code",
x = "Academic Year",
y = "Number of Graduates",
fill = "Term Type"
) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_manual(values = c("Fall" = "#ADD8E6", "Spring" = "#0047AB"))  # Custom colors for Fall and Spring
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5)  # Center the title
)
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop')
# Create a mapping of Term.Code to academic year and term type
result <- result |>
dplyr::mutate(
Academic_Year = dplyr::case_when(
Term.Code %in% c(202510, 202520) ~ "2024-2025",
Term.Code %in% c(202410, 202420) ~ "2023-2024",
Term.Code %in% c(202310, 202320) ~ "2022-2023",
Term.Code %in% c(202210, 202220) ~ "2021-2022",
Term.Code %in% c(202110, 202120) ~ "2020-2021",
Term.Code %in% c(202010, 202020) ~ "2019-2020",
Term.Code %in% c(201910, 201920) ~ "2018-2019",
Term.Code %in% c(201810, 201820) ~ "2017-2018",
TRUE ~ as.character(Term.Code)  # Default case if needed
),
Term_Type = dplyr::case_when(
stringr::str_ends(as.character(Term.Code), "10") ~ "Fall",
stringr::str_ends(as.character(Term.Code), "20") ~ "Spring",
TRUE ~ "Unknown"
)
) |>
dplyr::mutate(Term_Type = factor(Term_Type, levels = c("Spring", "Fall")))
# Create a stacked bar plot
ggplot2::ggplot(result, ggplot2::aes(x = Academic_Year, y = Num_Graduated, fill = Term_Type)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_text(ggplot2::aes(label = Num_Graduated), position = ggplot2::position_stack(vjust = 0.5), size = 3.5) +
ggplot2::labs(
title = "Number of BA Major Graduates by Term Code",
x = "Academic Year",
y = "Number of Graduates",
fill = "Term Type"
) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_manual(values = c("Fall" = "#ADD8E6", "Spring" = "#0047AB")) + # Custom colors for Fall and Spring
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5)  # Center the title
)
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Cohort.Term`, `Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop') |>
dplyr::filter(`Term.Code` == 202420)
result
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Cohort.Term`, `Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop')
result
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Cohort.Term`, `Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop')|>
dplyr::filter(`Term.Code` == 202420)
result
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
distribution
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Display the distribution in a table
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students"), caption = "Distribution of Semesters to Graduation")
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Display the distribution in a formatted table
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students"), caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1, bold = TRUE) |>
kableExtra::column_spec(2, color = "blue")
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Display the distribution in a formatted table with a colored header
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students"), caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1, bold = TRUE) |>
kableExtra::column_spec(2) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Display the distribution in a formatted table with a colored header
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students"), caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Calculate the total number of students
total_students <- sum(distribution$Num_Students)
# Add a percentage column
distribution <- distribution |>
dplyr::mutate(Percentage = (Num_Students / total_students) * 100)
# Display the distribution in a formatted table with a colored header
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students"), caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Calculate the total number of students
total_students <- sum(distribution$Num_Students)
# Add a percentage column
distribution <- distribution |>
dplyr::mutate(Percentage = (Num_Students / total_students) * 100)
# Display the distribution in a formatted table with a colored header
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students"), caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
# Identify students who have graduated
graduated_students <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::filter(max(`Term.Code`) == `Term.Code.Graduated`) |>
dplyr::ungroup()
# Count the number of unique Term.Code entries for each Student.ID
semester_counts <- graduated_students |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Semester_Count = dplyr::n_distinct(`Term.Code`), .groups = 'drop')
# Summarize the distribution of semester counts
distribution <- semester_counts |>
dplyr::group_by(Semester_Count) |>
dplyr::summarize(Num_Students = dplyr::n(), .groups = 'drop')
# Calculate the total number of students
total_students <- sum(distribution$Num_Students)
# Add a percentage column
distribution <- distribution |>
dplyr::mutate(Percentage = (Num_Students / total_students) * 100)
# Display the distribution in a formatted table with a colored header
knitr::kable(distribution, col.names = c("Number of Semesters", "Number of Students", "% of Total"), caption = "Distribution of Semesters to Graduation") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
# Determine the maximum Term.Code for each Student.ID to identify the graduation term
graduation_terms <- BA |>
dplyr::group_by(`Student.ID`) |>
dplyr::summarize(Max_Term_Code = max(`Term.Code`), .groups = 'drop')
# Filter the original data to only include rows where the Term.Code is the graduation term
graduated_students <- BA |>
dplyr::inner_join(graduation_terms, by = c("Student.ID" = "Student.ID", "Term.Code" = "Max_Term_Code")) |>
dplyr::filter(
`Term.Code.Graduated` == `Term.Code`,
`Major.1` == "BA Major" | `Major.2` == "BA Major" | `Major.3` == "BA Major"
)
# Count the number of students who graduated each semester for each Term.Code
result <- graduated_students |>
dplyr::group_by(`Cohort.Term`, `Term.Code`) |>
dplyr::summarize(Num_Graduated = dplyr::n_distinct(`Student.ID`), .groups = 'drop')|>
dplyr::filter(`Term.Code` == 202420)
# Display the distribution in a formatted table with a colored header
knitr::kable(result, col.names = c("Cohort Term", "Term Code", "Number of Graduates"), caption = "Spring 2024 Graduates") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::column_spec(1) |>
kableExtra::column_spec(2) |>
kableExtra::column_spec(3) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
BA |>
dplyr::filter(
(Major.1 == "BA Major" |
Major.2 == "BA Major" |
Major.3 == "BA Major") &
Term.Code == 202420
) |>
dplyr::mutate(Classification = dplyr::case_when(
Cum.Credit.Hrs >= 0 & Cum.Credit.Hrs < 30 ~ "Freshmen",
Cum.Credit.Hrs >= 30 & Cum.Credit.Hrs < 60 ~ "Sophomore",
Cum.Credit.Hrs >= 60 & Cum.Credit.Hrs < 90 ~ "Junior",
Cum.Credit.Hrs >= 90 ~ "Senior"
)) |>
dplyr::mutate(Classification = factor(Classification, levels = c("Freshmen", "Sophomore", "Junior", "Senior"))) |>
dplyr::group_by(Term.Code, Classification) |>
dplyr::summarise(Num_Students = dplyr::n_distinct(Student.ID)) |>
dplyr::arrange(Classification) |>
# Display the result in a formatted table
knitr::kable(result, col.names = c("Term Code", "Classification", "Number of Students"), caption = "Student Classification for Term Code 202420") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
result <- BA |>
dplyr::filter(
(Major.1 == "BA Major" |
Major.2 == "BA Major" |
Major.3 == "BA Major") &
Term.Code == 202420
) |>
dplyr::mutate(Classification = dplyr::case_when(
Cum.Credit.Hrs >= 0 & Cum.Credit.Hrs < 30 ~ "Freshmen",
Cum.Credit.Hrs >= 30 & Cum.Credit.Hrs < 60 ~ "Sophomore",
Cum.Credit.Hrs >= 60 & Cum.Credit.Hrs < 90 ~ "Junior",
Cum.Credit.Hrs >= 90 ~ "Senior"
)) |>
dplyr::mutate(Classification = factor(Classification, levels = c("Freshmen", "Sophomore", "Junior", "Senior"))) |>
dplyr::group_by(Term.Code, Classification) |>
dplyr::summarise(Num_Students = dplyr::n_distinct(Student.ID)) |>
dplyr::arrange(Classification) |>
# Display the result in a formatted table
knitr::kable(result, col.names = c("Term Code", "Classification", "Number of Students"), caption = "Student Classification for Term Code 202420") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
result <- BA |>
dplyr::filter(
(Major.1 == "BA Major" |
Major.2 == "BA Major" |
Major.3 == "BA Major") &
Term.Code == 202420
) |>
dplyr::mutate(Classification = dplyr::case_when(
Cum.Credit.Hrs >= 0 & Cum.Credit.Hrs < 30 ~ "Freshmen",
Cum.Credit.Hrs >= 30 & Cum.Credit.Hrs < 60 ~ "Sophomore",
Cum.Credit.Hrs >= 60 & Cum.Credit.Hrs < 90 ~ "Junior",
Cum.Credit.Hrs >= 90 ~ "Senior"
)) |>
dplyr::mutate(Classification = factor(Classification, levels = c("Freshmen", "Sophomore", "Junior", "Senior"))) |>
dplyr::group_by(Term.Code, Classification) |>
dplyr::summarise(Num_Students = dplyr::n_distinct(Student.ID)) |>
dplyr::arrange(Classification)
# Display the result in a formatted table
knitr::kable(result, col.names = c("Term Code", "Classification", "Number of Students"), caption = "Student Classification for Term Code 202420") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
result <- BA |>
dplyr::filter(
(Major.1 == "BA Major" |
Major.2 == "BA Major" |
Major.3 == "BA Major") &
Term.Code == 202420
) |>
dplyr::mutate(Classification = dplyr::case_when(
Cum.Credit.Hrs >= 0 & Cum.Credit.Hrs < 30 ~ "Freshmen",
Cum.Credit.Hrs >= 30 & Cum.Credit.Hrs < 60 ~ "Sophomore",
Cum.Credit.Hrs >= 60 & Cum.Credit.Hrs < 90 ~ "Junior",
Cum.Credit.Hrs >= 90 ~ "Senior"
)) |>
dplyr::mutate(Classification = factor(Classification, levels = c("Freshmen", "Sophomore", "Junior", "Senior"))) |>
dplyr::group_by(Term.Code, Classification) |>
dplyr::summarise(Num_Students = dplyr::n_distinct(Student.ID)) |>
dplyr::arrange(Classification)
# Display the result in a formatted table
knitr::kable(result, col.names = c("Term Code", "Classification", "Number of Students"), caption = "Student Classification for Spring 2024") |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) |>
kableExtra::row_spec(0, background = "#ADD8E6")  # Light gray header
